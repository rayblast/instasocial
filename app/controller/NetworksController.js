/*
 * File: app/controller/NetworksController.js
 *
 * This file was generated by Sencha Architect version 2.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.1.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('InstaSocial.controller.NetworksController', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            networkList: 'networkList',
            btLogin: '#btLogin',
            btLogout: '#btLogout',
            networkPanel: '#networkPanel'
        },

        control: {
            "btLogin": {
                tap: 'onBtLoginTap'
            },
            "btLogout": {
                tap: 'onBtLogoutTap'
            },
            "networkList": {
                itemtap: 'onNetworkListItemTap'
            }
        }
    },

    onBtLoginTap: function() {
        console.info('NetworksController.onBtLoginTap');

        var networksController = InstaSocial.app.getController(config.controllers.networksController);
        var networkPanel = Ext.Viewport.down(config.views.networkPanel);
        var record = networkPanel.getRecord();
        var network = record.data;

        core.connectivity.networks[network.id].login(networksController.setState);

    },

    onBtLogoutTap: function() {
        console.info('NetworksController.onBtLogoutTap');

        var networksController = InstaSocial.app.getController(config.controllers.networksController);
        var networkPanel = Ext.Viewport.down(config.views.networkPanel);
        var record = networkPanel.getRecord();
        var network = record.data;

        core.connectivity.networks[network.id].logout(networksController.setState);
    },

    onNetworkListItemTap: function(dataview, index, target, record, e, eOpts) {
        console.info('MainController.onNetworkListItemTap');

        var network = record.data;
        var networkPanel = Ext.Viewport.down(config.views.networkPanel);

        if(!networkPanel){
            networkPanel = Ext.widget(config.views.networkPanel);
        } 

        networkPanel.setRecord(record);
        networkPanel.setData({name:network.name, image:network.image});

        core.ui.display.loading.start();

        var networksController = InstaSocial.app.getController(config.controllers.networksController);
        networksController.setState(null);


        var showPanelArgs = {
            panel: networkPanel,
            target: target
        };

        core.connectivity.networks[network.id].checkState(networksController.showPanel, showPanelArgs);
    },

    itemTap: function(record, target) {
        console.info('NetworksController.itemTap');

        var network = record.data;
        var networkPanel = Ext.Viewport.down(config.views.networkPanel);

        if(!networkPanel){
            networkPanel = Ext.widget(config.views.networkPanel);
        } 

        networkPanel.setRecord(record);
        networkPanel.setData({name:network.name, image:network.image});

        //Ext.Viewport.setMasked({xtype:'loadmask',message:'Loading...'});
        core.ui.display.loading.start();

        //Ext.getCmp('btLogin').hide();
        //Ext.getCmp('btLogout').hide();
        var networksController = InstaSocial.app.getController(config.controllers.networksController);
        networksController.setState(null);


        var showPanelArgs = {
            panel: networkPanel,
            target: target
        };


        core.connectivity.networks[network.id].checkState(networksController.showPanel, showPanelArgs);

        //networkPanel.showBy(target);
        return;


        if(network.id == 'fb'){

            if(!global.activeNetworks.fb && !global.loadedNetworks.fb){
                InstaSocial.app.loadFb(target);
                //networkPanel.showBy(target);
            }else{
                FB.getLoginStatus(function(response) {
                    helpers.networks.fb.authCallback(response,target);
                    //networkPanel.showBy(target);
                    Ext.Viewport.setMasked(false);
                });
            }

        }else if(network.id == 'vk'){
            if(!global.activeNetworks.vk && !global.loadedNetworks.vk){
                InstaSocial.app.loadVk(target);
                //networkPanel.showBy(target);
            }else{       
                VK.Auth.getLoginStatus(function(response) {
                    helpers.networks.vk.authCallback(response, target);
                    //networkPanel.showBy(target);
                    Ext.Viewport.setMasked(false);
                });
            }
        }
    },

    setState: function(args) {
        console.info('NetworksController.setState');

        var state;
        if(args !== null){
            state = args.state;
        }else{
            state = null;
        }

        if(state == config.core.connectivity.state.loggedin){
            Ext.getCmp('btLogin').hide();
            Ext.getCmp('btLogout').show();
        }else{
            Ext.getCmp('btLogin').show();
            Ext.getCmp('btLogout').hide();
        }
    },

    showPanel: function(args) {
        console.info('NetworksController.showPanel');

        var networksController = InstaSocial.app.getController(config.controllers.networksController);
        networksController.setState(args);
        args.panel.showBy(args.target);
        core.ui.display.loading.stop();
    }

});